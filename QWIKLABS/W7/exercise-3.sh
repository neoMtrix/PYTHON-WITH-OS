# Exercise - 3
# We'll now work with a file named csv_to_html.py. This file converts the data in a CSV file into an HTML file that contains a table with the data. Let's practice this with an example file.

# Create a new CSV file.
nano user_emails.csv
# Add the following data into the file:

# Full Name, Email Address
# Blossom Gill, blossom@abc.edu
# Hayes Delgado, nonummy@utnisia.com
# Petra Jones, ac@abc.edu
# Oleg Noel, noel@liberomauris.ca
# Ahmed Miller, ahmed.miller@nequenonquam.co.uk
# Macaulay Douglas, mdouglas@abc.edu
# Aurora Grant, enim.non@abc.edu
# Madison Mcintosh, mcintosh@nisiaenean.net
# Montana Powell, montanap@semmagna.org
# Rogan Robinson, rr.robinson@abc.edu
# Simon Rivera, sri@abc.edu
# Benedict Pacheco, bpacheco@abc.edu
# Maisie Hendrix, mai.hendrix@abc.edu
# Xaviera Gould, xlg@utnisia.net
# Oren Rollins, oren@semmagna.com
# Flavia Santiago, flavia@utnisia.net
# Jackson Owens, jackowens@abc.edu
# Britanni Humphrey, britanni@ut.net
# Kirk Nixon, kirknixon@abc.edu
# Bree Campbell, breee@utnisia.net

# Save the file by clicking Ctrl-o, Enter key, and Ctrl-x.

# Give executable permission to the script file csv_to_html.py.
sudo chmod +x csv_to_html.py

# To visualize the data in the user_emails.csv file, you have to generate a webpage that'll be served by the webserver running on the machine.

# The script csv_to_html.py takes in two arguments, the CSV file, and location that would host the HTML page generated. Give write permission to the directory that would host that HTML page:
sudo chmod  o+w /var/www/html

# Next, run the script csv_to_html.py script by passing two arguments: user_emails.csv file and the path /var/www/html/. Also, append a name to the path with an HTML extension. This should be the name that you want the HTML file to be created with.
./csv_to_html.py user_emails.csv /var/www/html/<html-filename>.html

# Replace <html-filename> with the new name.

# Navigate to the /var/www/html directory. Here, you'll find an HTML file created with the filename you passed to the above script.
ls /var/www/html

# Now, to view this HTML page, open any web-browser and enter the following URL in the search bar.
# [linux-instance-external-IP]/[html-filename].html

# You should now be able to visualize the data within the user_emails.csv file on a webpage.

# Generate reports
# Now, we're going to practice creating a script, named ticky_check.py, that generates two different reports from this internal ticketing system log file i.e., syslog.log. This script will create the following reports:

# The ranking of errors generated by the system: A list of all the error messages logged and how many times each error was found, sorted by the most common error to the least common error. This report doesn't take into account the users involved.
# The user usage statistics for the service: A list of all users that have used the system, including how many info messages and how many error messages they've generated. This report is sorted by username.
# To create these reports write a python script named ticky_check.py. Use nano editor for this.
nano ticky_check.py

# Add the shebang line.

#!/usr/bin/env python3

# Here's your challenge: Write a script to generate two different reports based on the ranking of errors generated by the system and the user usage statistics for the service. You'll write the script on your own, but we'll guide you throughout.

# First, import all the Python modules that you'll use in this Python script. After importing the necessary modules, initialize two dictionaries: one for the number of different error messages and another to count the number of entries for each user (splitting between INFO and ERROR).

# Now, parse through each log entry in the syslog.log file by iterating over the file.

# For each log entry, you'll have to first check if it matches the INFO or ERROR message formats. You should use regular expressions for this. When you get a successful match, add one to the corresponding value in the per_user dictionary. If you get an ERROR message, add one to the corresponding entry in the error dictionary by using proper data structure.

# After you've processed the log entries from the syslog.log file, you need to sort both the per_user and error dictionary before creating CSV report files.

# Keep in mind that:

# The error dictionary should be sorted by the number of errors from most common to least common.
# The user dictionary should be sorted by username.
# Insert column names as ("Error", "Count") at the zero index position of the sorted error dictionary. And insert column names as ("Username", "INFO", "ERROR") at the zero index position of the sorted per_user dictionary.

# After sorting these dictionaries, store them in two different files: error_message.csv and user_statistics.csv.

# Save the ticky_check.py file by clicking Ctrl-o, Enter key, and Ctrl-x.