# Like we said in the earlier video, bash is a fully powered scripting language, not just a way of executing commands one after the other. We can assign variables, new conditional operations, execute loops, defined functions, and so much more. So much that will only get to cover the very basics in these next few videos. Let's start with variables. Much like Python, bash lets us use variables to store and retrieve values. In an earlier video, we looked at environment variables. These are variables that are set in the environment in which the command is executing. We mentioned that we set these variables using the equals sign. When we want to access the value of a variable in bash, we need to prefix the name of the variable with the dollar sign. On top of the predefined environment variables, we can also define our own variables for our scripts. To do that we just assign a value to the name of the variable that we want to define.
example=hello
echo $example
# Nice, but heads up. There can be no spaces between the name of the variable and the equal sign, or between the equal sign and the value. If we try to define a variable and leave a space at one side or the other, the show will complain that it can't find the command with the name that we're assigning.
example = hello
# My bad, also remember that any variable that you define in your script or in the command line is local to the environment where you define it. If you want commands from that environment to also see the variable you need to export them using the export keyword. Okay, let's now modify our script to gather info and add a variable to it. We'll use it to make our script look nicer by adding lines in between each of the commands. To do this, we'll define a variable called line, and we'll put a bunch of dashes in it.

# Now, instead of leaving empty lines, we'll print this variable to separate our commands.
# Now, let's try executing the modified script.
./gather-info-2.sh
# Perfect, there you have it, we set and used a variable in our bash script. Let's move on to another interesting feature available in bash called globs. Globs are characters that allow us to create list of files. The star and question mark are the most common globs. Besides being extremely fun to say globs, using these globs lets us create sequences of filenames that we can use as parameters to the commands we call an R scripts. You've probably come across them before, but let's do a quick recap of how we can use them. In bash, using a star in the command line we'll match all filenames that follow the format that we specify. Let's check out a few examples.
echo *.py
# We can see that when we write star.py, the shell turns it into a list containing all the filenames to end with py in the current directory. We can also put the star at the end of an expression to get the list of all files that start with a certain prefix.
echo c*
# In this case, we get all the files in the current directory that start with the letter C. We can also use a star with no prefix or suffix which would match all the files in the current directory.
echo *
# Alternatively, the question mark symbol can be used to match exactly one character instead of any amount of characters, and we can repeat it as many times as we need. For example, we can get the Python files with five characters in their name by using the five question marks together.
echo ?????.py
# Using globs like this, lets us create list of files that we might operate on, like calling other commands in passing this list. If you want to use this functionality in Python, it's available through the glob module. That might sound like something in Alien might say, but it's actually pretty powerful. Of course, there's a lot more we can do with bash scripting. Coming up in the next video, we'll talk about conditional execution.